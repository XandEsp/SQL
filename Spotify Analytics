# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL:

/* Most popular songs on Spotify*/

SELECT track_name, artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC LIMIT 10

/*Which songs are the most danceable?*/

SELECT track_name, artist_name, danceability
FROM BIT_DB.Spotifydata
ORDER BY danceability DESC LIMIT 10

/* On average, how many minutes long is each song?*/

SELECT AVG(duration_ms/60000) AS AverageLength
FROM BIT_DB.Spotifydata

/* Which songs have a time signature that is not 4/4?*/

SELECT track_name, artist_name
FROM BIT_DB.Spotifydata
WHERE time_signature <> 4

/* Which songs are in keys D-F#?*/

SELECT track_name, artist_name, song_key
FROM BIT_DB.Spotifydata
WHERE song_key >1
AND song_key <7

/* What key is each song in? */

SELECT track_name, artist_name, song_key
    CASE
        WHEN song_key = 0 THEN "C"
        WHEN song_key = 1 THEN "C#"
        WHEN song_key = 2 THEN "D"
        WHEN song_key = 3 THEN "D#"
        WHEN song_key = 4 THEN "E"
        WHEN song_key = 5 THEN "F"
        WHEN song_key = 6 THEN "F#"
        WHEN song_key = 7 THEN "G"
        WHEN song_key = 8 THEN "G#"
        WHEN song_key = 9 THEN "A"
        WHEN song_key = 10 THEN "A#"
        ELSE "B"
    END
FROM BIT_DB.Spotifydata

/* Calculate the average popularity for the artists in the Spotify data table. Then, for every artist with an average 
popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.*/

WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name
)
 
SELECT  artist_name,
        average_popularity,
        'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;
